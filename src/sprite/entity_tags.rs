use std::{collections::HashSet, marker::PhantomData};

use crate::prelude::*;

use super::Sprite;

/// Represents a set of tags (generated by the tag source `S`) associated with a given sprite entity.
#[derive(Clone, Debug)]
pub struct SpriteTags<S: TagSource> {
    sprite_id: &'static str,
    tags: HashSet<S::TagType>,
    pd: PhantomData<S>,
}

impl<S: TagSource> SpriteTags<S> {
    pub fn of(sprite_entity: &EntityRef, state: &State) -> Option<Self> {
        let sprite_id = state.select_one::<(Sprite,)>(sprite_entity)?.0.sprite_id;
        // Generate the tags for this entity.
        let tags = S::try_generate(sprite_entity, state)?;
        Some(Self {
            sprite_id,
            tags,
            pd: PhantomData::default(),
        })
    }

    /// Converts the maintained tags into `String`s and returns them.
    pub fn into_stringified_tags(self) -> HashSet<String> {
        self.tags
            .into_iter()
            .map(|tag| Into::<&'static str>::into(tag).to_string())
            // must at least contain the empty string to be able to match against files with no tags, e.g. default@, vehicle@
            .chain(std::iter::once(String::new()))
            .collect()
    }
}
